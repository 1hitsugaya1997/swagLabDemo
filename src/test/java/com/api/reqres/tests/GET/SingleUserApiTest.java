package com.api.reqres.tests.GET;

import com.api.reqres.clients.UserClient;
import io.qameta.allure.*;
import io.restassured.response.Response;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.util.Map;

import static io.qameta.allure.Allure.step;
import static org.junit.jupiter.api.Assertions.*;

@Epic("Reqres API")
@Feature("GET /users/{id}")
@Story("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID")
@Severity(SeverityLevel.CRITICAL)
public class SingleUserApiTest {

    private final UserClient userClient = new UserClient();

    @Test
    @DisplayName("–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç: –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∞–ª–∏–¥–Ω—ã–º ID")
    @Description("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID")
    void shouldGetUsersById() {
        final int id = 2;

        // üîç –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        Response response = step("–í—ã–ø–æ–ª–Ω–∏—Ç—å GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID = " + id,
                () -> userClient.getSingleUsers(id));

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞", () ->
                assertEquals(200, response.statusCode(), "–û–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å 200"));

        // üì¶ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Map<String, Object> userData = step("–ò–∑–≤–ª–µ—á—å –æ–±—ä–µ–∫—Ç 'data' –∏–∑ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞",
                () -> response.jsonPath().getMap("data"));

        step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ null", () ->
                assertNotNull(userData, "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å null"));

        // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è
        Integer userId = (Integer) userData.get("id");
        String email = (String) userData.get("email");
        String firstName = (String) userData.get("first_name");
        String lastName = (String) userData.get("last_name");

        step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", () -> {
            assertNotNull(userId, "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null");
            assertTrue(userId > 0, "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º");

            assertNotNull(email, "Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null");
            assertTrue(email.matches("^[\\w.-]+@[\\w.-]+\\.\\w+$"), "Email –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º");

            assertNotNull(firstName, "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å null");
            assertNotNull(lastName, "–§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å null");
        });
    }


}
