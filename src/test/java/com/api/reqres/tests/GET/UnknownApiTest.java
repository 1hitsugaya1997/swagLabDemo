package com.api.reqres.tests.GET;

import com.api.reqres.clients.UserClient;
import com.api.reqres.dto.UnknownList.UnknownListResponse;
import com.api.reqres.dto.Unknown.UnknownResource;
import io.qameta.allure.*;
import io.restassured.response.Response;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.util.List;

import static io.qameta.allure.Allure.step;
import static org.junit.jupiter.api.Assertions.*;

@Epic("Reqres API")
@Feature("GET /unknown")
@Story("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤")
@Severity(SeverityLevel.CRITICAL)
public class UnknownApiTest {

    private final UserClient userClient = new UserClient();

    @Test
    @DisplayName("–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ /unknown")
    @Description("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–µ—Å—É—Ä—Å–æ–≤ —á–µ—Ä–µ–∑ /unknown")
    void shouldGetUnknownResources() {

        // üîç –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        Response response = step("–í—ã–ø–æ–ª–Ω–∏—Ç—å GET-–∑–∞–ø—Ä–æ—Å /unknown",
                () -> userClient.getUnknown());

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–∞
        step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞", () ->
                assertEquals(200, response.statusCode(), "–û–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å 200"));

        // üì¶ –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ DTO
        UnknownListResponse listResponse = step("–î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ DTO UnknownListResponse",
                () -> response.as(UnknownListResponse.class));

        List<UnknownResource> resources = listResponse.getData();

        step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–µ –ø—É—Å—Ç–æ–π", () ->
                assertFalse(resources.isEmpty(), "–°–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"));

        // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞
        UnknownResource resource = resources.get(0);

        step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞", () -> {
            assertNotNull(resource.getId(), "ID —Ä–µ—Å—É—Ä—Å–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null");
            assertTrue(resource.getId() > 0, "ID —Ä–µ—Å—É—Ä—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º");

            assertNotNull(resource.getName(), "–ò–º—è —Ä–µ—Å—É—Ä—Å–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å null");
            assertNotNull(resource.getYear(), "–ì–æ–¥ —Ä–µ—Å—É—Ä—Å–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null");
            assertNotNull(resource.getColor(), "–¶–≤–µ—Ç —Ä–µ—Å—É—Ä—Å–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null");
            assertNotNull(resource.getPantoneValue(), "Pantone –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å null");
        });
    }
}
