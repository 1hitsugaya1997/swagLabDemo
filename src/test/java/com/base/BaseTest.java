package com.base;

import com.codeborne.selenide.Configuration;
import com.codeborne.selenide.WebDriverRunner;
import com.utils.TestConfig;
import io.github.bonigarcia.wdm.WebDriverManager;
import io.qameta.allure.selenide.AllureSelenide;
import org.junit.jupiter.api.*;
import org.openqa.selenium.chrome.ChromeOptions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.concurrent.Semaphore;

import static com.codeborne.selenide.logevents.SelenideLogger.addListener;

public class BaseTest {

    private static final Logger logger = LoggerFactory.getLogger(BaseTest.class);
    private static final int COUNT_BROWSER = TestConfig.getJunitFixedParallelism();
    private static final Semaphore BROWSER_SEMAPHORE = new Semaphore(COUNT_BROWSER);

    @BeforeAll
    static void globalSetup() {
        // ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º AllureSelenide Listener –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        addListener("AllureSelenide", new AllureSelenide()
                .screenshots(true)
                .savePageSource(true)
        );

        WebDriverManager.chromedriver().setup();

        ChromeOptions options = new ChromeOptions();
        options.addArguments(
                "--disable-popup-blocking",
                "--disable-notifications",
                "--disable-infobars",
                "--disable-save-password-bubble",
                "--disable-translate",
                "--no-default-browser-check",
                "--start-maximized",
                "--incognito"
        );

        // üõ†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Selenide
        Configuration.browser = "chrome";
        Configuration.browserCapabilities = options;
        Configuration.browserSize = "1920x1080";
        Configuration.baseUrl = TestConfig.getBaseUrl();
        Configuration.reopenBrowserOnFail = false;
        Configuration.holdBrowserOpen = false;
        Configuration.timeout = 10000;

        // üì∏ –£–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ (Selenide –∏ Allure)
        Configuration.reportsFolder = "build/reports/tests";

        String login = TestConfig.getLogin("standard_user");
        String password = TestConfig.getPassword("standard_user");
        if (login.isEmpty() || password.isEmpty()) {
            throw new IllegalStateException("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è –¥–ª—è standard_user –Ω–µ –∑–∞–¥–∞–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞");
        }
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –õ–æ–≥–∏–Ω: {}", login);
    }

    @BeforeEach
    void setup() {
        try {
            logger.info("–û–∂–∏–¥–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞...");
            BROWSER_SEMAPHORE.acquire();
            logger.info("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä. –ü–æ—Ç–æ–∫: {}", Thread.currentThread().getName());

            WebDriverRunner.clearBrowserCache();
            com.codeborne.selenide.Selenide.open("/");
        } catch (InterruptedException e) {
            logger.error("–ü–æ—Ç–æ–∫ –ø—Ä–µ—Ä–≤–∞–Ω –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞", e);
            Thread.currentThread().interrupt();
        }
    }

    @AfterEach
    void tearDown(TestInfo testInfo) {
        try {
            WebDriverRunner.closeWebDriver();
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: ", e);
        } finally {
            BROWSER_SEMAPHORE.release();
            logger.info("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ. –ü–æ—Ç–æ–∫: {}", Thread.currentThread().getName());
        }
    }
}
